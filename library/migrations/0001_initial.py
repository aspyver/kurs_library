# -*- coding: utf-8 -*-
# Generated by Django 1.10.4 on 2016-12-25 15:41
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AreaOfExpertise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('area_name', models.CharField(max_length=64, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('author_name', models.CharField(max_length=255, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('isbn', models.CharField(max_length=32, unique=True)),
                ('book_name', models.CharField(max_length=255)),
                ('book_city', models.CharField(max_length=64)),
                ('publisher', models.CharField(max_length=64)),
                ('pages_count', models.IntegerField(blank=True, null=True)),
                ('price', models.IntegerField(blank=True, null=True)),
                ('areas', models.ManyToManyField(db_table='BookHasArea', related_name='books', to='library.AreaOfExpertise')),
                ('authors', models.ManyToManyField(db_table='BookHasAuthor', related_name='books', to='library.Author')),
            ],
        ),
        migrations.CreateModel(
            name='BookCopy',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('shelf_number', models.IntegerField()),
                ('rack_number', models.IntegerField()),
                ('book_info', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='bookcopies', to='library.Book')),
            ],
        ),
        migrations.CreateModel(
            name='Reader',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('surname', models.CharField(max_length=64)),
                ('name', models.CharField(max_length=64)),
                ('address', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='ReaderBookCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book_name', models.CharField(max_length=255)),
                ('author', models.CharField(blank=True, max_length=255)),
                ('phone', models.CharField(max_length=32, unique=True)),
                ('taken_date', models.DateField(auto_now_add=True)),
                ('return_date', models.DateField(blank=True, default=django.db.models.deletion.SET_NULL, null=True)),
                ('bookcopy_number', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='library.BookCopy')),
                ('employee_give', models.ForeignKey(blank=True, default=django.db.models.deletion.SET_NULL, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='books_given', to=settings.AUTH_USER_MODEL)),
                ('employee_take', models.ForeignKey(blank=True, default=django.db.models.deletion.SET_NULL, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='books_taken', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='reader',
            name='reader_books',
            field=models.ManyToManyField(db_table='ReaderHasBookCard', related_name='readers', to='library.ReaderBookCard'),
        ),
    ]
